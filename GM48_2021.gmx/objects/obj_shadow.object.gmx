<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>999999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surf = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shadow

var quality_scale = settings[? "surface_size"];

if (surface_exists(surf) and (surface_get_width(surf)!=view_wport*1.5*quality_scale or surface_get_width(surf)!=view_hport*1.5*quality_scale))
{
    surface_free(surf);
}

if (settings[? "shadow_shader"] == -1)
exit;

if (not surface_exists(surf))
{
    surf = surface_create(view_wport*1.5*quality_scale, view_hport*1.5*quality_scale);
}

var wid = view_wport/8;
var hei = view_hport/8;

var zoom = 1;
if instance_exists(obj_camera)
    zoom = obj_camera.zoom/2;

surface_set_target(surf);

draw_clear_alpha(c_white, 0);
with(obj_tree_test)
{
    
    if (instance_exists(obj_camera) and distance_to_object(obj_camera)&lt;700*zoom)
    {
        var xx1 = (x-view_xview+(wid)-16)/zoom*quality_scale;
        var yy1 = (y-view_yview+(hei)+74)/zoom*quality_scale;
        draw_sprite_ext(sprite_index, 1, xx1, yy1, image_xscale/zoom*quality_scale, image_yscale/zoom*quality_scale, 0, c_black, 1);
        
        var xx2 = (x-view_xview+(wid))/zoom*quality_scale;
        var yy2 = (y-view_yview+(hei))/zoom*quality_scale;
        draw_sprite_ext(sprite_index, 0, xx2, yy2, image_xscale/zoom*quality_scale, image_yscale/zoom*quality_scale, 0, c_black, 1);       
    }
}
with(obj_player)
{
    var xx1 = (x-view_xview+(wid))/zoom*quality_scale;
    var yy1 = (y-view_yview+(hei)-1)/zoom*quality_scale;
    draw_sprite_ext(sprite_index, image_index, xx1, yy1, image_xscale/zoom*quality_scale*1.1, image_yscale*-.6/zoom*quality_scale, -20, c_black, 1);   
}

//draw_set_colour_write_enable(true, true, true, false);
/*with(obj_wake)
{
    var xx1 = (x-view_xview+(wid))/zoom*quality_scale;
    var yy1 = (y-view_yview+(hei))/zoom*quality_scale;
    
    draw_sprite_ext(sprite_index, image_index, xx1, yy1, image_xscale/zoom*quality_scale, image_yscale/zoom*quality_scale, 0, c_white, .7);
}*/

//draw_sprite_tiled_ext(spr_ripples, 0, (current_time/100-view_xview)/zoom*quality_scale, (current_time/200-view_yview)/zoom*quality_scale, .5/zoom*quality_scale, .5/zoom*quality_scale, c_white, .7);
//draw_set_colour_write_enable(true, true, true, true);
surface_reset_target();

var shader = -1;
if (shaders_are_supported() and shader_is_compiled(just_blur) and shader_is_compiled(just_blur_small) and settings[? "shadow_shader"] != 0)
{
    var blur_size = 2; //24 * (sin(current_time/3000)+1)+8;
    
    shader = just_blur;
    
    if (settings[? "shadow_shader"] == 1)
    {
        shader = just_blur_small;
    }
    
    if not keyboard_check(vk_backspace)
        shader_set(shader);    
    var shaderparam = shader_get_uniform(shader, "size");
    shader_set_uniform_f(shaderparam, surface_get_width(surf), surface_get_height(surf), blur_size/zoom*quality_scale);
    shaderparam = shader_get_uniform(shader, "xoffset");
    shader_set_uniform_f(shaderparam, 0);//sin(current_time/5000)/3);
}

if(surface_exists(surf))
    draw_surface_ext(surf, view_xview-wid, view_yview-hei, view_wview/view_wport/quality_scale, view_hview/view_hport/quality_scale, 0, c_white, .3);

if (shader != -1)
    shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
