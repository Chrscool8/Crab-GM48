<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*creation_size = random(500);

for(var i = 1; i &lt; creation_size; i+= 75)
{
    var amt = clamp(irandom_range(i/75, 110), 10, 110);
    show_debug_message(string(amt));
    var off = random(360);
    for(var j = 0; j &lt; 360; j += amt)
    {
        var xx = x + lengthdir_x(i, off+j) + irandom_range(-25, 25);
        var yy = y + lengthdir_y(i, off+j) + irandom_range(-25, 25);
        if (!collision_circle(xx, yy, 50, par_water, true, true))
        {
            var h = instance_create(xx, yy, obj_tree_test);
            h.darkness = 1-((i+1)/creation_size)-.5;
        }
    }
}*/

creation_size = random_range(100, 350);

for(var i = 0; i &lt; 1; i += .2)
{
    var num_trees = power(2, i*5);
    //show_debug_message("NUM"+string(num_trees));
    var off = random(360);
    for(var j = 0; j &lt; 360; j += 360/num_trees)
    {
        //show_debug_message("&gt;"+string(j));    
        var dir = j+off+ irandom_range(-5, 5);
        var dis = sqr(i)*creation_size;
        var xx = x + lengthdir_x(dis, dir) + irandom_range(-50, 50);
        var yy = y + lengthdir_y(dis, dir) + irandom_range(-50, 50);
        if (!collision_circle(xx, yy, 100, par_water, true, true))
        {
            if (instance_exists(obj_tree_test))
            {
                var ob = instance_nearest(xx, yy, obj_tree_test);
                if (point_distance(xx, yy, ob.x, ob.y)&gt;10)
                {
                    var h = instance_create(xx, yy, obj_tree_test);
                    h.darkness = (1-i)/2;
                }
            }
            else
            {
                var h = instance_create(xx, yy, obj_tree_test);
                h.darkness = (1-i)/2;
            }
        }
    }
}

my_sprite = -1;
my_sprite2 = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_exists(my_sprite))
{
    sprite_delete(my_sprite);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if surface_exists(surf)
    surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// prim
/*draw_set_blend_mode(bm_subtract);
draw_ellipse_colour(x-creation_size, y-creation_size, x+creation_size, y+creation_size, c_white, c_black, false);
draw_set_blend_mode(bm_normal);*/

var light_gween = make_color_rgb(125, 146, 100);
var gween = make_color_rgb(100, 125, 70);

var surface_size = creation_size*3;
if (my_sprite == -1)
{
    if (surface_size != 0)
    {
        var surf = surface_create(surface_size, surface_size);
        
        if (surface_exists(surf))
        {
            surface_set_target(surf);
            draw_clear_alpha(c_black, 0);
            
            draw_set_color(gween);
            var width = .5+random(1);
            var init_dir = random(360);
            var dis = 80+random(30);
            var init_dis = dis;
            
            draw_primitive_begin(pr_trianglefan);
            draw_vertex_colour(surface_size/2, surface_size/2, light_gween, 1);
            for(var i = 0; i &lt;= 360; i += 1)
            {
                var this_dis = dis+sin(i/36*width-pi/2+pi/8)*40; 
                this_dis = lerp(this_dis, init_dis+sin(0/36*width-pi/2)*40, (max(0, i-270)/90))+40;
                draw_vertex_colour(surface_size/2+lengthdir_x(this_dis, init_dir+i), surface_size/2+lengthdir_y(this_dis, init_dir+i), light_gween, 1);                
            }   
            draw_primitive_end(); 
            
            draw_primitive_begin(pr_trianglefan);
            draw_vertex_colour(surface_size/2, surface_size/2, c_green, 1);
            for(var i = 0; i &lt;= 360; i += 1)
            {
                var this_dis = dis+sin(i/36*width-pi/2)*40; 
                this_dis = lerp(this_dis, init_dis+sin(0/36*width-pi/2)*40, (max(0, i-270)/90));
                draw_vertex_colour(surface_size/2+lengthdir_x(this_dis, init_dir+i), surface_size/2+lengthdir_y(this_dis, init_dir+i), gween, 1);                
            }   
            draw_primitive_end();         
            draw_set_color(c_white);
            
            /*for(var i = 0; i &lt; 1; i += .1)
            {
                var num_trees = power(2, i);
                //show_debug_message("NUM"+string(num_trees));
                var off = random(360);
                for(var j = 0; j &lt; 360; j += 360/num_trees)
                {
                    //show_debug_message("&gt;"+string(j));    
                    var dir = j+off+irandom_range(-5, 5);
                    var dis = sqr(i)*creation_size/4;
                    var xx = x + lengthdir_x(dis, dir) + irandom_range(-50, 50);
                    var yy = y + lengthdir_y(dis, dir) + irandom_range(-50, 50);
                    if (!collision_circle(xx, yy, 40, par_water, true, true))
                    {
                        draw_circle(xx-x+surface_size/2, yy-y+surface_size/2, 60, true);
                        //draw_sprite(spr_grass, random(sprite_get_number(spr_grass)), xx-x+surface_size/2, yy-y+surface_size/2)
                        //effect_create_above(ef_ring, xx, yy, 1, c_white);
                    }
                }
            }*/
            surface_reset_target();
            
            my_sprite = sprite_create_from_surface(surf, 0, 0, surface_size, surface_size, false, false, 0, 0);
            surface_free(surf);
        }  
    }  
}
else
{
    draw_sprite(my_sprite, 0, x-surface_size/2, y-surface_size/2);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// grass
/*draw_set_blend_mode(bm_subtract);
draw_ellipse_colour(x-creation_size, y-creation_size, x+creation_size, y+creation_size, c_white, c_black, false);
draw_set_blend_mode(bm_normal);*/

var surface_size = creation_size*3;
if (my_sprite2 == -1)
{
    if (surface_size != 0)
    {
        var surf = surface_create(surface_size, surface_size);
        
        if (surface_exists(surf))
        {
            surface_set_target(surf);
            draw_clear_alpha(c_black, 0);
            
            for(var i = 0; i &lt; 1; i += .05)
            {
                var num_trees = power(3, i*5);
                //show_debug_message("NUM"+string(num_trees));
                var off = random(360);
                for(var j = 0; j &lt; 360; j += 360/num_trees)
                {
                    //show_debug_message("&gt;"+string(j));    
                    var dir = j+off+irandom_range(-5, 5);
                    var dis = sqr(i)*creation_size;
                    var xx = x + lengthdir_x(dis, dir) + irandom_range(-50, 50);
                    var yy = y + lengthdir_y(dis, dir) + irandom_range(-50, 50);
                    if (!collision_circle(xx, yy, 40, par_water, true, true))
                    {
                        draw_sprite(spr_grass, random(sprite_get_number(spr_grass)), xx-x+surface_size/2, yy-y+surface_size/2)
                        //effect_create_above(ef_ring, xx, yy, 1, c_white);
                    }
                }
            }
            surface_reset_target();
            
            my_sprite2 = sprite_create_from_surface(surf, 0, 0, surface_size, surface_size, false, false, 0, 0);
            surface_free(surf);
        }  
    }  
}
else
{
    draw_sprite(my_sprite2, 0, x-surface_size/2, y-surface_size/2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
