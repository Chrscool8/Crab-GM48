<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boat</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dir = 0;
surf = -1;
sep = 2;
ticker = 0;
max_spd = 5;
spd = max_spd;
alarm[0] = room_speed*3 + random(room_speed*30);

playable = false;

swap_timer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if surface_exists(surf)
    surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fish

alarm[0] = room_speed*3 + random(room_speed*30);

var xx = x + lengthdir_x(spd*3, dir);
var yy = y + lengthdir_y(spd*3, dir);
if (instance_position(xx, yy, par_water))
    var h = instance_create(xx, yy, obj_fish);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (playable)
{
    if (ds_list_find_index(global.collected_letters, spr_sail) == -1)
        max_spd = 3.5;
    else
        max_spd = 7.5;
    
    spd += (key_up-key_down)/20;
    spd = clamp(spd, -max_spd/2, max_spd);
    
    dir -= (key_right-key_left);
    
    if (not instance_position(x, y, par_water))
    {
        spd *= .91;
        
        if (!settings[? "tip_beach"])
        {
            settings[? "tip_beach"] = true;
            alert("You can press SPACE to get in or out of your boat!", room_speed*5);
        }
    }
    
    x += lengthdir_x(spd, dir);
    y += lengthdir_y(spd, dir);
    
    if (swap_timer &gt; 0)
        swap_timer -= 1;
}
else
{
    spd *= .91;
    
    x += lengthdir_x(spd, dir);
    y += lengthdir_y(spd, dir);
}
        
ticker += 1;
ticker = ticker mod 2;

wrap();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//show_debug_message(string(surf))

if (shader_is_compiled(sh_color_replace))
{
    shader_set(sh_color_replace);
    
    var shaderparam = shader_get_uniform(shader_current(), "color_old1");
    shader_set_uniform_f(shaderparam, 226/255, 0, 0, 10/255);
    shaderparam = shader_get_uniform(shader_current(), "color_new1");
    shader_set_uniform_f(shaderparam,  global.shirt_color_r/255, global.shirt_color_g/255, global.shirt_color_b/255);
    
    shaderparam = shader_get_uniform(shader_current(), "color_old2");
    shader_set_uniform_f(shaderparam, 88/255, 0, 0, 10/255);
    shaderparam = shader_get_uniform(shader_current(), "color_new2");
    shader_set_uniform_f(shaderparam, global.shirt_color_r/255-.2, global.shirt_color_g/255-.2, global.shirt_color_b/255-.2);
}


if (not playable)
{
    if (instance_exists(obj_player))
    {
        if (point_distance(x, y, obj_player.x, obj_player.y) &lt; 50)
        {
            draw_set_alpha(.1);
            draw_set_color(c_blue);
            draw_circle(x, y, 50, false);
            draw_set_color(c_white);
            draw_set_alpha(1);
        }
    }
}

var buffer_size = 100;

if (point_in_rectangle(x, y, view_xview-buffer_size, view_yview-buffer_size, view_xview+view_wview+buffer_size*2, view_yview+view_hview+buffer_size*2))
{
    if (playable)
        sprite_index = spr_boat;
    else
        sprite_index = spr_boat2;
    
    var size = 256;
    
    if (not surface_exists(surf))
    {
        surf = surface_create(size, size);
    }
    
    surface_set_target(surf);
    draw_clear_alpha(c_white, 0);
    var iterations = 2;
    for(var i = 0; i &lt; image_number*iterations-2; i++)
    {
        draw_sprite_ext(sprite_index, i/iterations, size/2, size/2-sep*i/iterations, 1, 1, dir, c_white, 1);
    }
    
    //iterations += 1;
    if (ds_list_find_index(global.collected_letters, spr_sail)!=-1)
    {
        for(var i = image_number*iterations; i &lt; image_number*iterations+32; i++)
        {
            var sp = abs(spd)/10;
            var on = 1-((i-image_number*iterations)/16);
            if (on &gt; sp)
                draw_sprite_ext(sprite_index, 8, size/2, size/2-(sep)*i/iterations, 1, 1, dir, c_white, 1);
            else
                draw_sprite_ext(sprite_index, 9, size/2, size/2-(sep)*i/iterations, 1, 1, dir, c_white, 1);
        }
    }
    surface_reset_target();
    
    if(surface_exists(surf))
        draw_surface_ext(surf, x-size/2, y-size/2+(size*.1), 1, .8, 0, c_white, 1);
    
    if (ticker == 0 and abs(spd)&gt;.1)
    {
        var h = instance_create(x+lengthdir_x(16, dir), y+lengthdir_y(16, dir), obj_wake);
        h.dir = dir;
    }
    //h = instance_create(x, y-24, object13);
    //h.dir = dir - 90;
    
    if (key_left or not instance_position(x, y, obj_water))
    {
        var h = instance_create(x+lengthdir_x(16, dir+90), y+lengthdir_y(16, dir+90), obj_wake);
        h.dir = dir + 90;
        h.size = .5;
    }
    
    if (key_right or not instance_position(x, y, obj_water))
    {
        var h = instance_create(x+lengthdir_x(16, dir-90), y+lengthdir_y(16, dir-90), obj_wake);
        h.dir = dir - 90;
        h.size = .5;
    }
}
else
{
    if surface_exists(surf)
        surface_free(surf);
}

if (shader_is_compiled(sh_color_replace))
{
    shader_reset();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="71">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>send_gull();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xx = x + lengthdir_x(spd*3, dir);
var yy = y + lengthdir_y(spd*3, dir);
if (instance_position(xx, yy, par_water))
    var h = instance_create(xx, yy, obj_fish);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="46">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="10" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (playable and swap_timer == 0)
{
    with(instance_create(x, y, obj_player))
    {
        dir = other.dir;
        playable = true;
        swap_timer = 3;
    }
    
    playable = false;
    //instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
