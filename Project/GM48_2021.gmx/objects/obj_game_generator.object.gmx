<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
 
map_width = 36;
map_height = 36;
cell_size = 512;
var edge_buffer = 4;

map_data = ds_grid_create(map_width, map_height);

map_draw_y = view_hport*1.5;
// 0 - land
// 1 - water
// 2 - decorative island

enum cell_types
{
    land, 
    water,
    decorative,
    altar
};

global.collectables = ds_list_create();
ds_list_add(global.collectables, spr_map_collect, spr_sail, spr_compass, spr_bino);

ds_grid_set_region(map_data, 0, 0, map_width, map_height, 1);

var interests = ds_list_create();
ds_list_add(interests, 0, 1, 2, 3, 4, 5, 6, 7, 8);
ds_list_shuffle(interests);
var num_islands = ds_list_size(interests);

for(var i = 0; i &lt; num_islands; i++)
{   
    var ticker = 0;
    while(ticker &lt; 100000)
    {
        var xx = floor(random(map_width-edge_buffer*2-1))+edge_buffer;
        var yy = floor(random(map_height-edge_buffer*2-1))+edge_buffer;
        
        if (ds_grid_get(map_data, xx, yy) == cell_types.water)
        {
            ds_grid_set(map_data, xx, yy, 0);
            
            var interest = ds_list_find_value(interests, 0);
            ds_list_delete(interests, 0);
            
            switch (interest)
            {
                case 0: 
                    var h = instance_create((xx+.5) * cell_size, (yy+.5) * cell_size, obj_pedestal);
                    h.letter = spr_letter_C;
                break;
                case 1: 
                    var h = instance_create((xx+.5) * cell_size, (yy+.5) * cell_size, obj_pedestal);
                    h.letter = spr_letter_R;
                break;
                case 2: 
                    var h = instance_create((xx+.5) * cell_size, (yy+.5) * cell_size, obj_pedestal);
                    h.letter = spr_letter_A;
                break;
                case 3: 
                    var h = instance_create((xx+.5) * cell_size, (yy+.5) * cell_size, obj_pedestal);                    
                    h.letter = spr_letter_B;
                break;
                case 4: 
                    var h = instance_create((xx+.5) * cell_size, (yy+.5) * cell_size, obj_pedestal);
                    h.letter = spr_compass;
                    h.upgrade_platform = true;
                break;
                case 5: 
                    var h = instance_create((xx+.5) * cell_size, (yy+.5) * cell_size, obj_pedestal);
                    h.letter = spr_sail;
                    h.upgrade_platform = true;
                break;
                case 6: 
                    var h = instance_create((xx+.5) * cell_size, (yy+.5) * cell_size, obj_pedestal);
                    h.letter = spr_bino;
                    h.upgrade_platform = true;
                break;
                case 7: 
                    var h = instance_create((xx+.5) * cell_size, (yy+.5) * cell_size, obj_pedestal);
                    h.letter = spr_map_collect;
                    h.upgrade_platform = true;
                break;
                case 8: 
                    //var h = instance_create((xx+.5) * cell_size, (yy+.5) * cell_size, obj_pedestal);
                    //h.letter = spr_map_collect;
                    //h.upgrade_platform = true;
                    instance_create((xx+.5) * cell_size, (yy+.5) * cell_size, obj_altar);
                    ds_grid_set(map_data, xx, yy, cell_types.altar);
                break;
            }             
            
            var prev_xx = xx;
            var prev_yy = yy;
            
            var isle_kind = choose(0, 1, 1, 1,1, 1, 1,1, 1, 1,1, 1, 1, 1, 1, 3);
            
            if (isle_kind == 1)
            {
                var xoff = choose(0, -2);
                var yoff = choose(0, -2);
                var xw = choose(3, 4);
                var yw = choose(3, 4);
                for(var k=0; k&lt;xw; k++)
                {
                    for(var l=0; l&lt;yw; l++)
                    {
                        if (ds_grid_get(map_data, clamp(xoff+xx+k, edge_buffer, map_width-edge_buffer), clamp(yoff+yy+l, edge_buffer, map_height-edge_buffer)) == cell_types.water)
                        {
                            ds_grid_set(map_data, clamp(xoff+xx+k, edge_buffer, map_width-edge_buffer), clamp(yoff+yy+l, edge_buffer, map_height-edge_buffer), cell_types.decorative);    
                        }
                    }
                }
            }
            
            if (isle_kind == 3)
            {
                repeat(5)
                {       
                    var snaking = true;
                    while(snaking)
                    {
                        if (random(3) &lt; 1)
                        {   
                            var xx_off = 0;
                            var yy_off = 0;
                                         
                            var dir_ = choose(0, 1);
                            if (dir_ == 0)
                                xx_off = choose(-1, 1);
                            else                    
                                yy_off = choose(-1, 1);
                                
                            if (ds_grid_get(map_data, clamp(xx+xx_off, edge_buffer, map_width-edge_buffer), clamp(yy+yy_off, edge_buffer, map_height-edge_buffer)) == cell_types.water)
                            {
                                ds_grid_set(map_data, clamp(xx+xx_off, edge_buffer, map_width-edge_buffer), clamp(yy+yy_off, edge_buffer, map_height-edge_buffer), cell_types.decorative);    
                                xx = clamp(xx+xx_off, 0, map_width);
                                yy = clamp(yy+yy_off, 0, map_height);
                            }
                            else
                                snaking = false;
                        }
                        else
                            snaking = false;        
                    }
                    
                    xx = prev_xx;
                    yy = prev_yy;            
                }
            }           
            break;
        }    
        
        ticker += 1;
    }
    
    if (ticker == 100000)
    {
        ds_grid_set(map_data, 0, 0, 0);
    }
}

for(var i = 0; i &lt; map_width; i++)
{
    for(var j = 0; j &lt; map_height; j++)
    {
        var type = ds_grid_get(map_data, i, j);
        if (type == 1)
        {
            var h = instance_create(i*cell_size, j*cell_size, obj_water);
            h.image_xscale = cell_size/32;
            h.image_yscale = cell_size/32;
        }       
        else 
        {
            var left = ds_grid_get(map_data, i-1, j);
            var right = ds_grid_get(map_data, i+1, j);
            var up = ds_grid_get(map_data, i, j-1);
            var down = ds_grid_get(map_data, i, j+1);
            
            if (left == cell_types.water and up == cell_types.water)
            {
                instance_create(i * cell_size, j * cell_size, obj_water_edge_top_left);
            }
            
            if (right == cell_types.water and up == cell_types.water)
            {
                instance_create((i+1) * cell_size, j * cell_size, obj_water_edge_top_right);
            }
                                    
            if (right == cell_types.water and down == cell_types.water)
            {
                instance_create((i+1) * cell_size, (j+1) * cell_size, obj_water_edge_bottom_right);
            }
            
            if (left == cell_types.water and down == cell_types.water)
            {
                instance_create(i * cell_size, (j+1) * cell_size, obj_water_edge_bottom_left);
            }
            
            
        }
    }
}

for(var i = 0; i &lt; map_width; i++)
{
    for(var j = 0; j &lt; map_height; j++)
    {
        var type = ds_grid_get(map_data, i, j);
        if (type == cell_types.land || type == cell_types.decorative)
        {
            repeat(random(3))
            {   
                repeat(10)
                {
                    var xxx = random_range(i * cell_size, (i+1) * cell_size);
                    var yyy = random_range(j * cell_size, (j+1) * cell_size);
                    if (instance_exists(obj_pedestal))
                    {
                        var obj = instance_nearest(xxx, yyy, obj_pedestal);
                        if (point_distance(xxx, yyy, obj.x, obj.y) &gt; 50)
                        {
                            instance_create(xxx, yyy, obj_tree_generator);
                            break;
                        }
                        
                    }
                    else
                    {
                        instance_create(xxx, yyy, obj_tree_generator);
                        break;
                    }
                }
            }
            
            repeat(random(20))
            {
                var xxx = random_range(i * cell_size, (i+1) * cell_size);
                var yyy = random_range(j * cell_size, (j+1) * cell_size);
                if (!collision_circle(xxx, yyy, 40, par_water, true, true))
                    instance_create(xxx, yyy, obj_decoration);
            }    
            
            repeat(choose(0, 0, 1, 2))
            {
                var xxx = random_range(i * cell_size, (i+1) * cell_size);
                var yyy = random_range(j * cell_size, (j+1) * cell_size);
                if (!collision_circle(xxx, yyy, 40, par_water, true, true))
                    instance_create(xxx, yyy, obj_crab);
            }     
        }
    }
}

with(obj_pedestal)
{
    if (upgrade_platform)
    {
        if (not ds_list_empty(global.collectables))
            letter = ds_list_find_value(global.collectables, 0);
        else
            letter = -1;
    }    
}    

instance_create(0, 0, obj_globals);

//instance_destroy();

var spawnx = 2000;
var spawny = 2000;

var ticker = 0;
while(ticker &lt; 100000)
{
    var xx = floor(random(map_width-edge_buffer*2-1+3))+edge_buffer;
    var yy = floor(random(map_height-edge_buffer*2-1))+edge_buffer;
    
    if (ds_grid_get(map_data, xx, yy) == cell_types.land and ds_grid_get(map_data, xx-2, yy) == cell_types.water)
    {
        spawnx = (xx-2+.5)*cell_size;
        spawny = (yy+.5)*cell_size
        break;
    }
    ticker += 1;
}

global.shirt_color_r = random(255);
global.shirt_color_g = random(255);
global.shirt_color_b = random(255);

instance_create(spawnx, spawny, obj_camera);
instance_create(0, 0, obj_water_renderer);
instance_create(0, 0, obj_shadow);
with(instance_create(spawnx, spawny, obj_boat))
    playable = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//instance_create(mouse_x, mouse_y, obj_crab);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ds_list_find_index(global.collected_letters, spr_map_collect) != -1)
{
    if (keyboard_check(ord("M")))
        map_draw_y = lerp(map_draw_y, view_hport*.4, .5);
    else
        map_draw_y = lerp(map_draw_y, view_hport*1.5, .5);
    
    if (map_draw_y &lt; view_hport*1.3)
    {
        draw_sprite_ext(spr_map, 0, view_wport/2, map_draw_y, 4, 4, 0, c_white, 1);
        var cel_size = 12;
          
        for(var i = 2; i &lt; map_width-2; i++)
        {
            for(var j = 2; j &lt; map_height-2; j++)
            {
                var type = ds_grid_get(map_data, i, j);
                if (type == 0)
                {
                    draw_set_color(make_color_rgb(255,210,162));
                }
                else if (type == 1)
                {
                    draw_set_color(make_color_rgb(0,177,230));
                }
                else if (type == 2)
                {
                    draw_set_color(c_green);
                }
                else
                {
                    draw_set_color(c_black);
                }
                
                draw_set_alpha(.85);
                draw_rectangle(view_wport/2 + i*cel_size-cel_size/2 - (map_width*cel_size/2), map_draw_y + j*cel_size-cel_size/2 - (map_height*cel_size/2), view_wport/2 + i*cel_size+cel_size/2 - (map_width*cel_size/2), map_draw_y + j*cel_size+cel_size/2 - (map_height*cel_size/2), false);
                draw_set_alpha(1);
            }
        }
        draw_set_color(c_black);
        draw_set_alpha(.3*keyboard_check(vk_delete));
        for(var i = 0; i &lt;= map_width; i++)
        {
            draw_line(view_wport/2 + i*cel_size-cel_size/2 - (map_width*cel_size/2), map_draw_y + 0*cel_size-cel_size/2 - (map_height*cel_size/2), view_wport/2 + i*cel_size-cel_size/2 - (map_width*cel_size/2), map_draw_y + map_height*cel_size-cel_size/2 - (map_height*cel_size/2));
        }
        
        for(var j = 0; j &lt;= map_height; j++)
        {
            draw_line(view_wport/2 + 0*cel_size-cel_size/2 - (map_width*cel_size/2), map_draw_y + j*cel_size-cel_size/2 - (map_height*cel_size/2), view_wport/2 + map_height*cel_size-cel_size/2 - (map_width*cel_size/2), map_draw_y + j*cel_size-cel_size/2 - (map_height*cel_size/2));
        }
        draw_set_alpha(1);
        
        if (ds_list_find_index(global.collected_letters, spr_compass)!=-1)
        {
            if (instance_exists(obj_camera))
            {
                var i = obj_camera.x / (cell_size);
                var j = obj_camera.y / (cell_size);
                draw_sprite(spr_cross, 0, view_wport/2 + i*cel_size-cel_size/2 - (map_width*cel_size/2), map_draw_y + j*cel_size-cel_size/2 - (map_height*cel_size/2));
            }
            
            draw_sprite_ext(spr_compass_icon, 0, view_wport/2 + 2*cel_size-cel_size/2 - (map_width*cel_size/2), map_draw_y + map_height*cel_size-cel_size/2 - (map_height*cel_size/2), 4, 4, 0, c_white, 1);
        }
    }
    draw_set_color(c_white);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
